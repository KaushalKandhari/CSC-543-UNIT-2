#include <iostream>

struct Node {
    int row;
    int col;
    int value;
    Node* next;

    Node(int r, int c, int v) : row(r), col(c), value(v), next(nullptr) {}
};

class SparseMatrix {
public:
    SparseMatrix() : start(nullptr) {}

    void insert(int row, int col, int value) {
        Node* newNode = new Node(row, col, value);
        if (!start) {
            start = newNode;
        } else {
            Node* current = start;
            while (current->next) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void display() {
        Node* current = start;
        while (current) {
            std::cout << current->row << " " << current->col << " " << current->value;
            if (current->next) {
                std::cout << " --> ";
            } else {
                std::cout << " --> null";
            }
            current = current->next;
        }
        std::cout << std::endl;
    }

private:
    Node* start;
};

int main() {
    SparseMatrix matrix;
    
    // Insert non-zero elements from the given matrix
    matrix.insert(0, 2, 3);
    matrix.insert(0, 4, 4);
    matrix.insert(1, 2, 5);
    matrix.insert(1, 3, 7);
    matrix.insert(3, 1, 2);
    matrix.insert(3, 2, 6);

    std::cout << "Start --> ";
    matrix.display();

    return 0;
}
