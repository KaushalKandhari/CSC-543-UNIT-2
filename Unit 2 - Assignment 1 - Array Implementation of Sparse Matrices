#include <iostream>
#include <vector>

void convertToSparseMatrix(const std::vector<std::vector<int>>& inputMatrix) {
    int numRows = inputMatrix.size();
    int numCols = inputMatrix[0].size();

    std::vector<int> rowIndices;
    std::vector<int> columnIndices;
    std::vector<int> values;

    // Traverse the input matrix to extract non-zero elements
    for (int i = 0; i < numRows; ++i) {
        for (int j = 0; j < numCols; ++j) {
            if (inputMatrix[i][j] != 0) {
                rowIndices.push_back(i);
                columnIndices.push_back(j);
                values.push_back(inputMatrix[i][j]);
            }
        }
    }

    // Print the compressed sparse matrix
    std::cout << "Row\t\t";
    for (int i = 0; i < rowIndices.size(); ++i) {
        std::cout << rowIndices[i] << "\t";
    }

    std::cout << std::endl << "Column\t";
    for (int i = 0; i < columnIndices.size(); ++i) {
        std::cout << columnIndices[i] << "\t";
    }

    std::cout << std::endl << "Value\t";
    for (int i = 0; i < values.size(); ++i) {
        std::cout << values[i] << "\t";
    }
}

int main() {
    std::vector<std::vector<int>> inputMatrix = {
        {0, 0, 3, 0, 4},
        {0, 0, 5, 7, 0},
        {0, 0, 0, 0, 0},
        {0, 2, 6, 0, 0}
    };

    convertToSparseMatrix(inputMatrix);

    return 0;
}
